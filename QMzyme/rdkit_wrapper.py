################################################################################ Code written by Heidi Klem while at# Colorado State University as a graduate student# in the Paton and McCullagh groups and at the# National Institute of Standards and Technology# as an NRC Postdoc (Fed).# e: heidiklem@yahoo.com or heidi.klem@nist.gov###############################################################################import numpy as npfrom rdkit import Chemfrom rdkit.Chem import rdMolTransformsfrom rdkit.Chem import rdDistGeomsolvent_list=['HOH','WAT','T3P','SOL'] protein_residues =  ['ALA', 'ARG', 'ASH', 'ASN', 'ASP', 'CYM', 'CYS', 'CYX',                     'GLH', 'GLN', 'GLU', 'GLY', 'HIS', 'HID', 'HIE', 'HIP',                     'HYP', 'ILE', 'LEU', 'LYN', 'LYS', 'MET', 'PHE', 'PRO',                     'SER', 'THR', 'TRP', 'TYR', 'VAL', 'HSE', 'HSD', 'HSP' ]def atom_coords(mol, atom):    '''    mol            - rdkit mol object.    atom            - atom from rdkit mol object.    Returns numpy array of the atomic cartesian coorinates.    '''    return np.asarray(mol.GetConformer().GetAtomPosition(atom.GetIdx()))def centroid_coords(mol):    return np.asarray(Chem.rdMolTransforms.ComputeCentroid((mol.GetConformer())))def get_atoms(mol):    return mol.GetAtoms()    def check_pdb_rdkit(file):    '''    Function to assess PDB format, identify any formatting incompatibilities     with the QMzyme code, and gather useful basic information.    clean            - boolean, default=True. If False, the PDB format will                 not be checked. Usually not a problem when downloading                 straight from rcsb.org.    Prints out basic information of the pdb file, and  if     issues are found the PDB file will be fixed, and the original     will be copied to a new file with the suffix '_original.pdb'.    '''    wat_count, protein_res_count, non_protein_res_count = 0,0,0    data, protein_seq, non_protein_seq = [], [], []    h_present, no_chain_info = False, False    previous_res = None    edits_made = False    residue_count = 0    res_num_previous = None    non_protein_residues = {}    non_protein_residues['Chain'] = []    non_protein_residues['Name'] = []    non_protein_residues['Number'] = []    non_protein_chemical_name = {}    mol = Chem.MolFromPDBFile(file,                              removeHs=False,                              sanitize=False)    for atom in mol.GetAtoms():        if ' H' in res_info(atom,'atom_name'):            h_present = True        if res_info(atom,'chain') == ' ':            no_chain_info = True            atom.GetPDBResidueInfo().SetChainId('X')        current_res = define_residue(atom)        if previous_res == current_res:            continue        previous_res = current_res        if current_res[1] in solvent_list:            wat_count += 1            continue        if atom.GetPDBResidueInfo().GetIsHeteroAtom() is True:            non_protein_seq.append(current_res)            continue        if current_res[1] in protein_residues:            protein_seq.append(current_res)            protein_res_count += 1        else:            non_protein_seq.append(current_res)    print("Information in PDB file: {}".format(file))    if h_present == True:        print("Hydrogens are present")    else:        print("Hydrogens are not present.")    if no_chain_info == True:        print("Chain IDs not defined were set to 'X'.")    print("Total number of atoms: {}".format(mol.GetNumAtoms()))    print("Water molecules: {}".format(wat_count))    print("Standard amino acid residues: {}".format(protein_res_count))    print("The following {} non-protein residues were detected:"          .format(non_protein_res_count))    if non_protein_res_count > 0:        chain = non_protein_residues['Chain']        name = non_protein_residues['Name']        number = non_protein_residues['Number']        for i in range(non_protein_res_count):            chemical_name = non_protein_chemical_name[name[i]]            print("Chain: {}".format(chain[i]),                  " Residue Name: {}".format(name[i]),                  " Chemical Name: {}".format(chemical_name),                  " Residue Number: {}".format(number[i]))        return protein_res_count, h_present, non_protein_residues, non_protein_res_count, non_protein_chemical_name        def remove_atoms(mol, indices):    indices.sort(reverse=True)    for i in indices:        mol.RemoveAtom(i)    return mol            def define_residue(atom):    '''    Function to completely define the residue an atom belongs to with rdkit.    atom            - an atom from an rdkit mol object.    Returns tuple of format: (chain,residue name,residue number)    '''    res = {}    for key in rdkit_res:        if key != 'atom_name':            res[key] = res_info(atom,key)    return resdef res_info(atom, info):    if info in rdkit_res:        return rdkit_res[info](atom)def res_name(atom):    return atom.GetPDBResidueInfo().GetResidueName().split()[0]def atom_name(atom):    return atom.GetPDBResidueInfo().GetName()def res_number(atom):    return atom.GetPDBResidueInfo().GetResidueNumber()def chain(atom):    return atom.GetPDBResidueInfo().GetChainId()rdkit_res = {'res_name': res_name,              'atom_name': atom_name,              'res_number': res_number,             'chain': chain}