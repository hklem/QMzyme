##### PDB SPECIFIC #####pdb_format = {'record_type':[0,6],              'atom_number':[6,11],               'atom_name':[12,16],              'alt_loc':[16],              'res_name':[17,20],              'chain_id':[21],              'res_number':[22,26],              'insertion_code':[26],              'x':[30,38],              'y':[38,46],              'z':[46,54],              'occupancy':[54,60],              'temperature_factor':[60,66],              'seg_id':[72,76],              'element_symbol':[76,78],              'charge':[78,80]}def pdb_info(info,line):    return line[pdb_format[info][0]:pdb_format[info][1]]def collect_pdb_data(file=None,data=None):    if file is not None:        try:             with open(file, 'r') as f:                data=f.readlines()        except:            raise FileNotFoundError("file {} not found.".format(file))    else:        if data is None:            raise Exception("Must define either file or lines from a pdb file.")    pdb_data = {'res_name_sequence':[],'atom_sequence':[],'number_of_atoms':0,'atom_coords':[],'res_num_sequence':[]}    for line in data:        if pdb_info('record_type',line).strip() in ['ATOM','HETATM']:            pdb_data['res_name_sequence'].append(pdb_info('res_name',line))            pdb_data['res_num_sequence'].append(pdb_info('res_number',line))            pdb_data['number_of_atoms'] += 1            pdb_data['atom_sequence'].append(pdb_info('atom_name',line))            pdb_data['atom_coords'].append((pdb_info('x',line),                                          pdb_info('y',line),                                          pdb_info('z',line)))    return pdb_data